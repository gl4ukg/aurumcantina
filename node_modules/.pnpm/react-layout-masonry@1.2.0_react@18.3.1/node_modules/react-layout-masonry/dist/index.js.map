{"version":3,"sources":["../src/Masonry.tsx","../src/useMasonry.ts","../src/useCoulmnsCount.ts","../src/useWindowWidth.ts","../src/breakpoints.ts","../src/context.ts","../src/index.ts"],"sourcesContent":["'use client';\n\nimport { ElementType, ReactElement, forwardRef, useId } from 'react';\n\nimport { MasonryProps, PolymorphicRef } from './types';\nimport useMasonry from './useMasonry';\nimport { MasonryItemContext } from './context';\n\ntype MasonryComponent = <C extends ElementType = 'div'>(props: MasonryProps<C>) => ReactElement<C>;\n\nconst MasonryBase = <T extends ElementType>(props: MasonryProps<T>, forwaredRef: PolymorphicRef<T>) => {\n  const { gap, as: Component = 'div', columnProps, columns, ...rest } = props;\n\n  const uniq = useId();\n  const columnsChildren = useMasonry(props.children, columns);\n\n  return (\n    <Component\n      data-masonry-id={`Masonry-${uniq}`}\n      {...rest}\n      style={{ display: 'flex', gap, ...rest.style }}\n      ref={forwaredRef}\n    >\n      {columnsChildren.map((column, index) => {\n        return (\n          <Component\n            key={`Masonry__Column_${uniq}_${index}`}\n            data-masonry-column={index + 1}\n            {...columnProps}\n            style={{\n              display: 'flex',\n              flex: 1,\n              flexDirection: 'column',\n              gap,\n              ...columnProps?.style,\n            }}\n          >\n            {column.map((child, childIndex) => {\n              return (\n                <MasonryItemContext.Provider\n                  value={{ column: index, position: childIndex }}\n                  key={`Masonry__Column_Child_${uniq}_${childIndex}`}\n                >\n                  {child}\n                </MasonryItemContext.Provider>\n              );\n            })}\n          </Component>\n        );\n      })}\n    </Component>\n  );\n};\n\nexport const Masonry = forwardRef(MasonryBase) as MasonryComponent;\n","import { Children, ReactNode, isValidElement, useMemo } from 'react';\n\nimport useColumnsCount from './useCoulmnsCount';\nimport { Columns } from './types';\n\nconst createEmptyColumns = (count: number): Array<[]> => {\n  return Array.from({ length: count }, () => []);\n};\n\nconst useMasonry = (children: ReactNode, columns?: Columns): ReactNode[][] => {\n  const noOfColumns = useColumnsCount(columns);\n\n  const columnsChildren = useMemo(() => {\n    const group: ReactNode[][] = createEmptyColumns(noOfColumns);\n\n    Children.forEach(children, (child, index) => {\n      if (isValidElement(child)) {\n        group[index % noOfColumns].push(child);\n      }\n    });\n\n    return group;\n  }, [noOfColumns, children]);\n\n  return columnsChildren;\n};\n\nexport default useMasonry;\n","import { useMemo } from 'react';\n\nimport { Columns } from './types';\nimport useWindowWidth from './useWindowWidth';\nimport findBreakpoint from './breakpoints';\n\nconst DEFAULT_COLUMNS = 3;\n\nconst useColumnsCount = (columns?: Columns): number => {\n  const isResponsive = typeof columns === 'object';\n\n  const windowWidth = useWindowWidth(isResponsive);\n\n  const columnsCount = useMemo(() => {\n    if (!isResponsive) {\n      return columns ?? DEFAULT_COLUMNS;\n    }\n\n    const breakPoint = findBreakpoint(columns, windowWidth);\n    return columns[breakPoint] ?? DEFAULT_COLUMNS;\n  }, [isResponsive, windowWidth, columns]);\n\n  return columnsCount;\n};\n\nexport default useColumnsCount;\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useWindowWidth = (isResponsive: boolean = true): number => {\n  const [windowWidth, setWindowSize] = useState(window.innerWidth);\n\n  const handleResize = useCallback(() => {\n    setWindowSize(window.innerWidth);\n  }, []);\n\n  useEffect(() => {\n    if (isResponsive) {\n      window.addEventListener('resize', handleResize);\n    } else {\n      window.removeEventListener('resize', handleResize);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [isResponsive, handleResize]);\n\n  return windowWidth;\n};\n\nexport default useWindowWidth;\n","import { BreakPointSpec, BreakPoints, BreakPointsArray } from './types';\n\nconst defaultBreakpoints = [640, 786, 1024, 1280, 1536];\n\nconst arrayToBreakpoints = (breakPoints: BreakPointsArray): BreakPoints => {\n  return breakPoints.reduce((obj, bpValue, bpIndex) => {\n    if (typeof bpValue !== 'number') {\n      return obj;\n    }\n\n    return {\n      ...obj,\n      ...{ [defaultBreakpoints[bpIndex]]: bpValue },\n    };\n  }, {});\n};\n\nexport const normalizeBreakPoints = (breakPoints: BreakPointSpec): BreakPoints => {\n  if (!Array.isArray(breakPoints)) {\n    return breakPoints;\n  }\n\n  return arrayToBreakpoints(breakPoints);\n};\n\nconst findBreakpoint = (breakpoints: BreakPointSpec, windowWidth: number): number => {\n  const sortedBreakPoints = Object.keys(normalizeBreakPoints(breakpoints))\n    .map(Number)\n    .sort((a, b) => a - b);\n\n  let bp = null;\n\n  for (const breakPoint of sortedBreakPoints) {\n    if (windowWidth > breakPoint) {\n      bp = breakPoint;\n    }\n  }\n\n  return bp ?? sortedBreakPoints[0];\n};\n\nexport default findBreakpoint;\n","import { createContext, useContext } from 'react';\n\ninterface MasonryItemContextValues {\n  column: number;\n  position: number;\n}\n\nexport const MasonryItemContext = createContext<MasonryItemContextValues>({\n  column: 0,\n  position: 0,\n});\n\nexport const useMasonryItem = (): MasonryItemContextValues => useContext(MasonryItemContext);\n","import { Masonry } from './Masonry';\nimport useMasonry from './useMasonry';\nimport { useMasonryItem } from './context';\n\nexport * from './types';\nexport { useMasonry, useMasonryItem };\nexport default Masonry;\n"],"mappings":"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","names":["forwardRef","useId","Children","isValidElement","useMemo","useMemo","useCallback","useEffect","useState","useWindowWidth","isResponsive","windowWidth","setWindowSize","handleResize","useWindowWidth_default","defaultBreakpoints","arrayToBreakpoints","breakPoints","obj","bpValue","bpIndex","normalizeBreakPoints","findBreakpoint","breakpoints","windowWidth","sortedBreakPoints","a","b","bp","breakPoint","breakpoints_default","DEFAULT_COLUMNS","useColumnsCount","columns","isResponsive","windowWidth","useWindowWidth_default","useMemo","_a","breakPoint","breakpoints_default","useCoulmnsCount_default","createEmptyColumns","count","useMasonry","children","columns","noOfColumns","useCoulmnsCount_default","useMemo","group","Children","child","index","isValidElement","useMasonry_default","createContext","useContext","MasonryItemContext","useMasonryItem","jsx","MasonryBase","props","forwaredRef","gap","Component","columnProps","columns","rest","uniq","useId","columnsChildren","useMasonry_default","column","index","child","childIndex","MasonryItemContext","Masonry","forwardRef","src_default","Masonry"]}