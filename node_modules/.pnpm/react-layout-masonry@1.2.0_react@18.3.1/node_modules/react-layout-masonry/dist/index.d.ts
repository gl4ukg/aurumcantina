import { ElementType, ComponentPropsWithRef, PropsWithChildren, ComponentPropsWithoutRef, ReactElement, ReactNode } from 'react';

type BreakPoints = Record<number, number> | Array<number | undefined>;
type BreakPointsArray = Array<number | undefined>;
type BreakPointSpec = BreakPoints | BreakPointsArray;
type Columns = number | BreakPointSpec;
type AsProp<T extends ElementType> = {
    as?: T;
};
type PropsToOmit<T extends ElementType, P> = keyof (AsProp<T> & P);
type PolymorphicComponentProp<T extends ElementType, Props = {}> = PropsWithChildren<Props & AsProp<T>> & Omit<ComponentPropsWithoutRef<T>, PropsToOmit<T, Props>>;
type PolymorphicComponentPropWithRef<T extends ElementType, Props = {}> = PolymorphicComponentProp<T, Props> & {
    ref?: PolymorphicRef<T>;
};
type PolymorphicRef<T extends ElementType> = ComponentPropsWithRef<T>['ref'];
type MasonryOwnProps<T extends ElementType> = {
    columns?: Columns;
    gap?: number;
    columnProps?: PolymorphicComponentPropWithRef<T, {}>;
};
type MasonryProps<T extends ElementType> = PolymorphicComponentPropWithRef<T, MasonryOwnProps<T>>;

type MasonryComponent = <C extends ElementType = 'div'>(props: MasonryProps<C>) => ReactElement<C>;
declare const Masonry: MasonryComponent;

declare const useMasonry: (children: ReactNode, columns?: Columns) => ReactNode[][];

interface MasonryItemContextValues {
    column: number;
    position: number;
}
declare const useMasonryItem: () => MasonryItemContextValues;

export { type BreakPointSpec, type BreakPoints, type BreakPointsArray, type Columns, type MasonryProps, type PolymorphicRef, Masonry as default, useMasonry, useMasonryItem };
